# Tic Tac Toe using Minimax Algorithm

# Function to print the game board
def print_board(board):
    print(board[0] + '|' + board[1] + '|' + board[2])
    print('-+-+-')
    print(board[3] + '|' + board[4] + '|' + board[5])
    print('-+-+-')
    print(board[6] + '|' + board[7] + '|' + board[8])
    print()

# Function to check if a player has won
def is_winner(board, player):
    win_conditions = [
        [0,1,2], [3,4,5], [6,7,8],  # Rows
        [0,3,6], [1,4,7], [2,5,8],  # Columns
        [0,4,8], [2,4,6]            # Diagonals
    ]
    for condition in win_conditions:
        if all(board[i] == player for i in condition):
            return True
    return False

# Function to check if game is a draw
def is_draw(board):
    return ' ' not in board

# Function to get all possible moves
def get_possible_moves(board):
    return [i for i, spot in enumerate(board) if spot == ' ']

# Function to make a move
def make_move(board, move, player):
    new_board = board.copy()
    new_board[move] = player
    return new_board

# Evaluate the board
def evaluate(board):
    if is_winner(board, 'X'):
        return 1   # AI win
    elif is_winner(board, 'O'):
        return -1  # Opponent win
    else:
        return 0   # Draw or undecided

# Check if game is over
def game_over(board):
    return is_winner(board, 'X') or is_winner(board, 'O') or is_draw(board)

# Minimax Algorithm
def minimax(state, depth, player):
    if depth == 0 or game_over(state):
        return evaluate(state)

    if player == 'X':  # Maximizing player
        best_score = float('-inf')
        for move in get_possible_moves(state):
            new_state = make_move(state, move, 'X')
            score = minimax(new_state, depth - 1, 'O')
            best_score = max(best_score, score)
        return best_score

    else:  # Minimizing player
        best_score = float('inf')
        for move in get_possible_moves(state):
            new_state = make_move(state, move, 'O')
            score = minimax(new_state, depth - 1, 'X')
            best_score = min(best_score, score)
        return best_score

# Function to find the best move for AI
def find_best_move(board):
    best_score = float('-inf')
    best_move = None
    for move in get_possible_moves(board):
        new_state = make_move(board, move, 'X')
        score = minimax(new_state, 4, 'O')
        if score > best_score:
            best_score = score
            best_move = move
    return best_move

# Main game loop
board = [' ' for _ in range(9)]
while True:
    print_board(board)
    if game_over(board):
        if is_winner(board, 'X'):
            print("AI Wins! 😎")
        elif is_winner(board, 'O'):
            print("You Win! 🎉")
        else:
            print("It's a Draw! 🤝")
        break

    # Player Move
    move = int(input("Enter your move (1-9): ")) - 1
    if board[move] != ' ':
        print("That space is taken! Try again.")
        continue
    board[move] = 'O'

    if game_over(board):
        print_board(board)
        if is_winner(board, 'O'):
            print("You Win! 🎉")
        elif is_winner(board, 'X'):
            print("AI Wins! 😎")
        else:
            print("It's a Draw! 🤝")
        break

    # AI Move
    print("AI is thinking...")
    best_move = find_best_move(board)
    board[best_move] = 'X'

