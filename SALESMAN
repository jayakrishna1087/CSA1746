import numpy as np

def tsp(cities):
    """
    Solves the Travelling Salesman Problem (TSP)
    using the Nearest Neighbor heuristic.

    Parameters:
        cities (list of np.array): List of (x, y) coordinates for each city.

    Returns:
        tour (list): The order in which cities are visited.
        total_distance (float): The total distance of the tour.
    """

    # Number of cities
    n = len(cities)

    # Create a distance matrix
    dist_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                dist_matrix[i][j] = np.linalg.norm(cities[i] - cities[j])

    # Initialize tour
    tour = [0]  # Start from city 0
    unvisited_cities = set(range(1, n))
    total_distance = 0

    # Visit all cities using nearest neighbor approach
    while unvisited_cities:
        current_city = tour[-1]
        nearest_city = min(unvisited_cities, key=lambda city: dist_matrix[current_city][city])
        tour.append(nearest_city)
        unvisited_cities.remove(nearest_city)
        total_distance += dist_matrix[current_city][nearest_city]

    # Return to the starting city
    tour.append(0)
    total_distance += dist_matrix[tour[-2]][0]

    return tour, total_distance


# Example usage
if __name__ == "__main__":
    # Define cities as (x, y) coordinates
    cities = [
        np.array([0, 0]),
        np.array([2, 3]),
        np.array([5, 4]),
        np.array([1, 1]),
        np.array([6, 2])
    ]

    tour, total_distance = tsp(cities)
    print("Optimal Tour (Nearest Neighbor Heuristic):", tour)
    print("Total Distance:", round(total_distance, 2))
